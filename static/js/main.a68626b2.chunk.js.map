{"version":3,"sources":["header/index.js","phoneDirectory/index.js","addContact/index.js","notFound/index.js","app/index.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","PhoneDirectory","addContact","_this","props","history","push","deleteContact","contactIndex","_this2","this","Fragment","onClick","contacts","map","contact","index","key","name","phone","Component","withRouter","AddContact","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBack","handleChange","event","setState","defineProperty","target","value","handleAdd","preventDefault","state","validateName","match","nameError","validatePhone","phoneError","detailsFilled","validContact","onSubmit","type","onChange","onBlur","disabled","NotFound","App","splice","header","BrowserRouter","Switch","Route","exact","path","component","phoneDirectory","Boolean","window","location","hostname","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a68626b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst  Header = () =>{\r\n    return (\r\n      <div className=\"app-header\">\r\n        <h1 >\r\n            Phone Directory \r\n        </h1>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nclass PhoneDirectory extends Component {\r\n    addContact=()=>{\r\n      this.props.history.push('/add');\r\n    }\r\n\r\n    deleteContact=(contactIndex)=>{\r\n         this.props.deleteContact(contactIndex);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <button className='btn btn-primary' onClick={()=>this.addContact()}>Add </button>\r\n                <table className='table borderless'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Contact</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.contacts.map((contact, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{contact.name}</td>\r\n                                    <td>{contact.phone}</td>\r\n                                    <td>\r\n                                        <button className='btn btn-danger'\r\n                                            onClick={() => this.deleteContact(index)}>Delete\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>)\r\n                        })}\r\n                    </tbody>\r\n\r\n                </table>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(PhoneDirectory);\r\n\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nclass AddContact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      phone: '',\r\n      nameError: null,\r\n      phoneError: null\r\n    }\r\n\r\n  }\r\n  handleBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleAdd = (event) => {\r\n    event.preventDefault();\r\n    let contact = {\r\n      name: this.state.name,\r\n      phone: this.state.phone\r\n    }\r\n    this.props.addContact(contact);\r\n    this.handleBack();\r\n  }\r\n\r\n  validateName = () => {\r\n    let nameValidation = /^[A-Za-z]+$/;\r\n    if (this.state.name.match(nameValidation))\r\n      this.setState({\r\n        nameError: null\r\n      })\r\n    else\r\n      this.setState({\r\n        nameError: 'Please Enter a Valid Alphabetic Name'\r\n      })\r\n  }\r\n\r\n  validatePhone = () => {\r\n    let phoneValidation = /^\\d{10}$/;\r\n    if (this.state.phone.match(phoneValidation))\r\n      this.setState({\r\n        phoneError: null\r\n      })\r\n\r\n    else\r\n      this.setState({\r\n        phoneError: 'Please Enter a Valid 10 Digit Phone Number'\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const detailsFilled = this.state.name !== '' && this.state.phone !== '';\r\n    const validContact = detailsFilled && this.state.phoneError === null &&\r\n      this.state.nameError === null;\r\n    return (\r\n      <React.Fragment>\r\n        <button className=\"btn btn-primary\" onClick={this.handleBack}>Back</button>\r\n        <form onSubmit={this.handleAdd}>\r\n          <div className=\"form-group\">\r\n            <label >\r\n              Name:\r\n               <input type=\"text\" name=\"name\" value={this.state.name}\r\n                className=\"form-control\" onChange={this.handleChange}\r\n                onBlur={this.validateName} />\r\n              <p className='error'>  {this.state.nameError} </p>\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Phone:\r\n               <input type=\"text\" name=\"phone\" value={this.state.phone}\r\n                className=\"form-control\" onChange={this.handleChange}\r\n                onBlur={this.validatePhone} />\r\n              <p className='error'>  {this.state.phoneError} </p>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <p className=\"heading-subscriber\">Subscriber to be Added</p>\r\n            <p>Name: {this.state.name}</p>\r\n            <p>Phone: {this.state.phone} </p>\r\n          </div>\r\n\r\n          {detailsFilled ? null : <p className='error'>Please Enter Both Name and Phone Number</p>}\r\n\r\n          <button className=\"btn btn-primary\" type=\"submit\"\r\n            disabled={!validContact}>Add</button>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AddContact);\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst  NotFound = () =>{\r\n    return (\r\n        <h2 className='notFound'>\r\n          Page Not Found\r\n        </h2>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport Header from '../header/index';\r\nimport PhoneDirectory from '../phoneDirectory';\r\nimport AddContact from '../addContact';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './style.css';\r\nimport NotFound from '../notFound';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contacts: [\r\n        { name: 'Sahil', phone: '8755079382' }\r\n      ]\r\n    }\r\n  }\r\n  /* I would have preferred using State Management Libarary like Redux, If this would be \r\n     an application with multiple properties in state, instead of lifting state up.\r\n  */\r\n\r\n  deleteContact = (contactIndex) => {\r\n    /* State Should not be mutated , because state mutation won't result in re-rendering of component */\r\n    let contacts = this.state.contacts;\r\n    contacts.splice(contactIndex, 1);\r\n    this.setState({ contacts });\r\n  }\r\n\r\n  addContact = (contact) => {\r\n    let contacts = this.state.contacts;\r\n    contacts.push(contact);\r\n    this.setState({ contacts });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"container\">\r\n          <Router>\r\n            <Switch>\r\n              <Route exact path=\"/\"\r\n                component={() => <PhoneDirectory contacts={this.state.contacts} deleteContact={this.deleteContact} />} />\r\n              <Route path=\"/add\" component={() => <AddContact addContact={this.addContact} />} />\r\n              <Route component={NotFound}></Route>\r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}